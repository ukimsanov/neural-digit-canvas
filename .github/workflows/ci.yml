name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src/mnist_classifier --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort

    - name: Run Black
      run: black --check src/ tests/

    - name: Run isort
      run: isort --check-only src/ tests/

    - name: Run Flake8
      run: flake8 src/ tests/

    - name: Run MyPy
      run: mypy src/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: docker build -t mnist-classifier:latest .

    - name: Run Docker container test
      run: |
        docker run --rm mnist-classifier:latest python -c "from src.mnist_classifier import LinearClassifier; print('Import successful')"

  train-and-evaluate:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .

    - name: Train models
      run: |
        python train.py --model both --epochs 2 --output-dir ci-outputs

    - name: Test inference
      run: |
        # Create a test image (white square on black background)
        python -c "
import numpy as np
from PIL import Image
img = np.zeros((28, 28), dtype=np.uint8)
img[10:18, 10:18] = 255
Image.fromarray(img).save('test_digit.png')
"
        # Run inference
        python inference.py test_digit.png --model-path ci-outputs/linear/final_model.pth --model-type linear

    - name: Upload models as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: ci-outputs/
        retention-days: 7

    - name: Upload training plots
      uses: actions/upload-artifact@v3
      with:
        name: training-plots
        path: |
          ci-outputs/**/*.png
          ci-outputs/results.json
        retention-days: 7